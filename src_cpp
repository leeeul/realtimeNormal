void setNormals(ofVboMesh &mesh, bool crossDir){ 
// crossDir 을 true 혹은 false 를 오가며 시험해보면 된다. 인덱싱을 먹인 방향에 따라 true가 맞을수도 false가 맞을수도 있다.

    int nV = mesh.getNumVertices(); // 찍은 버텍스의 수
    
    int nT = mesh.getNumIndices()/3; // 삼각 메쉬의 수
    
    vector<glm::vec3> norm(nV); // 노멀데이터의 숫자는 버텍스의 숫자와 같다

    for(int t=0; t<nT; t++){ // 삼각 메쉬로 다 조각내어 계산한다
        int i1 = mesh.getIndex(3*t);
        int i2 = mesh.getIndex(3*t+1);
        int i3 = mesh.getIndex(3*t+2);
        
        const glm::vec3 &v1 = mesh.getVertex(i1);
        const glm::vec3 &v2 = mesh.getVertex(i2);
        const glm::vec3 &v3 = mesh.getVertex(i3);
        
        glm::vec3 dir;
        if(crossDir){
            dir = glm::cross(v3-v1, v2-v1);
        }else{
            dir = glm::cross(v2-v1, v3-v1);
        }
        
        dir = glm::normalize(dir);
        
        norm[i1] += dir; 
        norm[i2] += dir;
        norm[i3] += dir;
		/*
			= 가 아닌 += 인 이유는 다음과 같다.
			normalized된 벡터들의 경우, 그들끼리 더한뒤에 다시 normalize시켜주면, 더한 벡터들의 평균 벡터가 나오게 된다.
			그 계산을 해준 것이다. 그들끼리 더한뒤에, 아래 나오는 for문에서 normalize시켜주어 한 버텍스에 걸린 여러 노멀값들의 평균치를 구하는 과정인 것이다.
		*/
    }
    
    for(int i=0; i<nV; i++){
        norm[i] = glm::normalize(norm[i]);
    }
    
    mesh.clearNormals();
    mesh.addNormals(norm);
}
